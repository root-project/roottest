//
// Odd pair:
//   pair<reco::Muon::MuonTrackType,edm::Ref<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> > >
// from map:
//   map<reco::Muon::MuonTrackType,edm::Ref<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> > >"

#if 0
{
gSystem->Load("lib/slc7_amd64_gcc10/libDataFormatsMuonReco.so");
c = TClass::GetClass("map<reco::Muon::MuonTrackType,edm::Ref<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> > >");
p = c->GetCollectionProxy();
// p->GetProperties() & TVirtualCollectionProxy::kIsEmulated
p->GetValueClass();
f = TFile::Open("aa98e17b-012c-492b-8e12-e530018cd464.root");
}
#endif

#if 1 // defined(__ROOTCLING__) || !defined(__CLING__)
#include "Rtypes.h"

namespace reco {

class Track {};

namespace Muon {
enum MuonTrackType {
   kNone
};
} // reco::Muon


} // reco

namespace edm {

class RefCoreWithIndex {

public:
// Nested classes declaration.

public:
// Data Members.
   unsigned short processIndex_;    //
   unsigned short productIndex_;    //
   unsigned int   elementIndex_;    //

   RefCoreWithIndex() = default;
   RefCoreWithIndex(RefCoreWithIndex && ) = default;
   RefCoreWithIndex &operator=(const RefCoreWithIndex & ) = default;
   RefCoreWithIndex(const RefCoreWithIndex & ) = default;
   ~RefCoreWithIndex() = default;

   ClassDefNV(RefCoreWithIndex,12); // Generated by MakeProject.
};

template <typename L, typename R, typename Q> class Ref {
   edm::RefCoreWithIndex product_;    //
};

namespace refhelper {
template <typename L, typename R> class FindUsingAdvance {};
}

}

#include <map>

#ifdef __ROOTCLING__
#pragma link C++ class map<reco::Muon::MuonTrackType,edm::Ref<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> > >+;
#pragma link C++ class edm::Ref<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >+;
#pragma link C++ class reco::Track+;
#pragma link C++ class vector<reco::Track>+;
#pragma link C++ class edm::RefCoreWithIndex+;
#pragma link C++ class edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track>+;
#endif

#endif

//map<reco::Muon::MuonTrackType,edm::Ref<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> > > mmmm;
